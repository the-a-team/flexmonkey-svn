<?xml version="1.0" encoding="utf-8"?><!--
FlexMonkey 1.0, Copyright 2008, 2009 by Gorilla Logic, Inc.
FlexMonkey 1.0 is distributed under the GNU General Public License, v2.
-->
<EventMap 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mateExtensions="com.gorillalogic.flexmonkey.application.mateExtensions.*"
	xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.utils.debug.Debugger;
			import com.gorillalogic.flexmonkey.application.VOs.SnapshotVO;
			import com.gorillalogic.flexmonkey.monkeyCommands.VerifyMonkeyCommand;
			import flash.display.DisplayObject;
			import mx.events.FlexEvent;
			import mx.core.ClassFactory;
			import mx.core.Application;
			import mx.managers.PopUpManager;
	
			import com.gorillalogic.flexmonkey.events.MonkeyCommandRunnerEvent;	
			import com.gorillalogic.flexmonkey.monkeyCommands.MonkeyCommandRunner;
			
			import com.gorillalogic.flexmonkey.application.events.UserEvent;
			import com.gorillalogic.flexmonkey.application.events.MonkeyFileEvent;
			import com.gorillalogic.flexmonkey.application.events.UndoEvent;
			import com.gorillalogic.flexmonkey.application.events.RecorderEvent;
			import com.gorillalogic.flexmonkey.application.events.AlertEvent;
			
			import com.gorillalogic.flexmonkey.application.managers.ApplicationManager;			
			import com.gorillalogic.flexmonkey.application.managers.WindowManager;			
			import com.gorillalogic.flexmonkey.application.managers.ProjectManager;			
			import com.gorillalogic.flexmonkey.application.managers.TestManager;
			import com.gorillalogic.flexmonkey.application.managers.UndoManager;
			import com.gorillalogic.flexmonkey.application.managers.AttributeManager;
			import com.gorillalogic.flexmonkey.application.managers.BrowserConnectionManager;
			
			
			import com.gorillalogic.flexmonkey.application.UI.views.MainView;
			import com.gorillalogic.flexmonkey.application.UI.views.ControlBarView;
			import com.gorillalogic.flexmonkey.application.UI.views.CommandGridView;
			import com.gorillalogic.flexmonkey.application.UI.views.CommandDetailView;
			import com.gorillalogic.flexmonkey.application.UI.renderers.AttributeMoveArrowItemRenderer;
			import com.gorillalogic.flexmonkey.application.UI.renderers.CommandDetailAttributeItemRenderer;
			import com.gorillalogic.flexmonkey.application.UI.renderers.CommandGridCommandItemRenderer;
			import com.gorillalogic.flexmonkey.application.UI.renderers.CommandGridResultItemRenderer;
			import com.gorillalogic.flexmonkey.application.UI.views.AlertView;
			import com.gorillalogic.flexmonkey.application.UI.views.SaveWarningDialogView;
			import com.gorillalogic.flexmonkey.application.UI.views.SnapshotWindowView;
			import com.gorillalogic.flexmonkey.application.UI.views.AirMonkeyWindowView;
			import com.gorillalogic.flexmonkey.application.UI.views.SpyWindowView;
			import com.gorillalogic.flexmonkey.application.UI.views.SpyPropertyView;
			import com.gorillalogic.flexmonkey.application.UI.views.SpyStyleView;
			import com.gorillalogic.flexmonkey.application.UI.views.ProjectPropertiesWindowView;
			import com.gorillalogic.flexmonkey.application.UI.views.AboutView;
			import com.gorillalogic.flexmonkey.application.UI.views.IntroView;
												
			import com.gorillalogic.flexmonkey.core.MonkeyTestRecorder;
			import com.gorillalogic.flexmonkey.application.utilities.TestXMLConvertor;
			import com.gorillalogic.flexmonkey.application.utilities.TestAS3Convertor;

			import mx.automation.events.AutomationRecordEvent;
			
			import mx.events.AdvancedDataGridEvent;
			
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;

			import flash.net.URLRequest;
            import flash.net.URLLoaderDataFormat;
		
		]]>
	</mx:Script>
	<Debugger level="{Debugger.INFO}"/> 

<!--......................................................................................................... 		
	In the INITIALIZE event handlers, the monkey instantiates and mate caches
		- ApplicationManager
		- WindowManager
		- TestManager
			- TestXMLConvertor used by the TestManager
		- ProjectManager
		- UndoManager
		- SnapshotManager
		- MonkeyCommandRunner
		- MonkeyTestRecorder
		- AttributeManager
	......................................................................................................... -->
	<EventHandlers type="{FlexEvent.INITIALIZE}" debug="true">
		<ObjectBuilder generator="{ApplicationManager}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"/>	
		</ObjectBuilder>	
		
		<ObjectBuilder generator="{WindowManager}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"
				targetSWFWindow="{Application.application}"/>	
		</ObjectBuilder>			

		<ObjectBuilder generator="{TestXMLConvertor}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"/>
		</ObjectBuilder>
		<ObjectBuilder generator="{TestAS3Convertor}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"/>
		</ObjectBuilder>
		<ObjectBuilder generator="{TestManager}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"
				testXMLConvertor="{TestXMLConvertor}"
				testAS3Convertor="{TestAS3Convertor}"/>
		</ObjectBuilder>

		<ObjectBuilder generator="{ProjectManager}">
			<Properties 
				mateDispatcher="{scope.dispatcher}"/>
		</ObjectBuilder>	
					
		<ObjectBuilder generator="{UndoManager}"/>	
		
		<ObjectBuilder generator="{MonkeyCommandRunner}">
			<Properties mateDispatcher="{scope.dispatcher}"/>			
		</ObjectBuilder>
		
		<ObjectBuilder generator="{MonkeyTestRecorder}">
			<Properties mateDispatcher="{scope.dispatcher}"/>			
		</ObjectBuilder>
		
		<ObjectBuilder generator="{AttributeManager}">
			<Properties mateDispatcher="{scope.dispatcher}"/>			
		</ObjectBuilder>	
		
		<ObjectBuilder generator="{BrowserConnectionManager}">
			<Properties mateDispatcher="{scope.dispatcher}"/>
		</ObjectBuilder>
				
	</EventHandlers>

<!--......................................................................................................... 		
	On APPLICATION_COMPLETE, the monkey reads and processes its preferences file
	......................................................................................................... -->
	<EventHandlers type="{FlexEvent.APPLICATION_COMPLETE}">
		<MethodInvoker generator="{BrowserConnectionManager}" method="setSingleton"/>
		<MethodInvoker generator="{ApplicationManager}" method="readUserPreferences" />
	</EventHandlers>

	<EventHandlers type="{MonkeyFileEvent.APPLICATION_PROMPT_FOR_NEW}">
		<ObjectBuilder generator="{IntroView}" cache="none">
			<Properties
				mateDispatcher="{scope.dispatcher}"
				styleName="IntroDialog"
				/>
		</ObjectBuilder>
		<MethodInvoker generator="{WindowManager}" method="displayIntro" arguments="{lastReturn}"/>			
	</EventHandlers>


	<EventHandlers type="{UserEvent.MONKEY_EXIT}">
		<MethodInvoker generator="{ApplicationManager}" method="monkeyExit" />
	</EventHandlers>


<!--......................................................................................................... 		
	Project handling
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.PROJECT_NEW_URL}" debug="true">
		<MethodInvoker generator="{ApplicationManager}" method="updateProjectURL" arguments="{event.item}"/>	
	</EventHandlers>	

	<EventHandlers type="{UserEvent.PROJECT_REQUEST_FOR_NEW}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="requestForNew" />	
	</EventHandlers>	

	<EventHandlers type="{UserEvent.PROJECT_REQUEST_FOR_OPEN}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="requestForOpen" />	
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.PROJECT_EDIT_PROPERTIES}" debug="true">
		<MethodInvoker generator="{WindowManager}" method="openProjectPropertiesWindow" />	
	</EventHandlers>	
	
	<EventHandlers type="{UserEvent.PROJECT_PROPERTIES_UPDATE}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="updateProjectProperties" arguments="{event.item}" />	
	</EventHandlers>
	
<!--......................................................................................................... 		
	Help handling
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.HELP_ABOUT}" debug="true">
		<ObjectBuilder generator="{AboutView}" cache="none">
			<Properties
				mateDispatcher="{scope.dispatcher}"
				styleName="IntroDialog"
				/>
		</ObjectBuilder>
		<MethodInvoker generator="{WindowManager}" method="displayAlert" arguments="{lastReturn}"/>		
	</EventHandlers>	
		
<!--......................................................................................................... 		
	Test file handling
	......................................................................................................... -->
	<EventHandlers type="{MonkeyFileEvent.TEST_FILE_PROMPT_FOR_SAVE}" debug="true">
		<ObjectBuilder generator="{SaveWarningDialogView}" cache="none">
			<Properties
				mateDispatcher="{scope.dispatcher}"
				titleText="Test File Not Saved"
				messageText="You'll lose your changes if you don't save!"
				styleName="SaveWarningDialog"
				/>
		</ObjectBuilder>
		<MethodInvoker generator="{WindowManager}" method="displayAlert" arguments="{lastReturn}"/>		
	</EventHandlers>

	<EventHandlers type="{MonkeyFileEvent.TEST_FILE_SAVE_CANCELLED}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="testFileSaveCancelled"/>		
		<MethodInvoker generator="{ApplicationManager}" method="testFileSaveCancelled"/>		
	</EventHandlers>
	
	<EventHandlers type="{MonkeyFileEvent.TEST_FILE_DONT_SAVE}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="testFileSaved"/>
		<MethodInvoker generator="{ApplicationManager}" method="testFileSaved"/>
	</EventHandlers>

	<EventHandlers type="{MonkeyFileEvent.TEST_FILE_SAVE}" debug="true">
		<MethodInvoker generator="{TestManager}" method="saveTestFile"/>		
		<MethodInvoker generator="{UndoManager}" method="save"/>
		<MethodInvoker generator="{ProjectManager}" method="testFileSaved"/>
		<MethodInvoker generator="{ApplicationManager}" method="testFileSaved"/>
	</EventHandlers>

<!--......................................................................................................... 		
	Generated Code file handling
	......................................................................................................... -->

	<EventHandlers type="{MonkeyFileEvent.TEST_FILE_SAVE_AS3}" debug="true">
		<MethodInvoker generator="{TestManager}" method="saveTestFilesAsAS3" />
	</EventHandlers>

<!--......................................................................................................... 		
	Snapshot file handling
	......................................................................................................... -->
	<EventHandlers type="{MonkeyFileEvent.SAVE_SNAPSHOT}" debug="true">
		<MethodInvoker generator="{ProjectManager}" method="getSnapshotURL" arguments="{event.url}"/>
		<ObjectBuilder generator="{File}" constructorArguments="{lastReturn}" cache="none"/>
		<MethodInvoker generator="{FileStream}" method="open" arguments="{[lastReturn,FileMode.WRITE]}"/>
		<MethodInvoker generator="{FileStream}" method="writeObject" arguments="{event.data}"/>
		<MethodInvoker generator="{FileStream}" method="close"/>		
	</EventHandlers>
	
	<EventHandlers type="{MonkeyFileEvent.LOAD_SNAPSHOT}" debug="true">
		<PropertySetter generator="{ProjectManager}" targetKey="currentVerifyCommand" source="event" sourceKey="data"/>
		<MethodInvoker generator="{ProjectManager}" method="getSnapshotURL" arguments="{event.url}"/>		
		<ObjectBuilder generator="{File}" constructorArguments="{lastReturn}" cache="none"/>
		<MethodInvoker generator="{FileStream}" method="open" arguments="{[lastReturn,FileMode.READ]}"/>
		<MethodInvoker generator="{FileStream}" method="readObject"/>
		<MethodInvoker generator="{ProjectManager}" method="setExpectedSnapshot" arguments="{lastReturn}"/>
		<MethodInvoker generator="{FileStream}" method="close"/>		
	</EventHandlers>	
	
<!--......................................................................................................... 		
	MonkeyTestRecorder
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.START_RECORDING}" debug="true">
		<MethodInvoker generator="{MonkeyTestRecorder}"	method="startRecording"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.STOP_RECORDING}" debug="true">
		<MethodInvoker generator="{MonkeyTestRecorder}"	method="stopRecording"/>
	</EventHandlers>
	
	<EventHandlers type="{RecorderEvent.NEW_UI_EVENT}" debug="true">
		<MethodInvoker generator="{TestManager}" method="addUIEvent" arguments="{event.command}"/>		
	</EventHandlers>

	<EventHandlers type="{RecorderEvent.NEW_SNAPSHOT}" debug="true">
		<MethodInvoker generator="{MonkeyTestRecorder}" method="snapshotTaken"/>
		<MethodInvoker generator="{WindowManager}" method="closeAlertWindow"/>
		<MethodInvoker generator="{ProjectManager}" method="updateSnapshot" arguments="{event.command}"/>
		<MethodInvoker generator="{AttributeManager}" method="refreshWindow"/>
		<MethodInvoker generator="{WindowManager}" method="openSpyWindow" />	
	</EventHandlers>	
	
<!--......................................................................................................... 		
	MonkeyCommandRunner
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.START_PLAYING}" debug="true">
		<MethodInvoker generator="{MonkeyCommandRunner}" method="startPlaying"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.STOP_PLAYING}" debug="true">
		<MethodInvoker generator="{MonkeyCommandRunner}"	method="stopPlaying"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.START_PAUSING}" debug="true">
		<MethodInvoker generator="{MonkeyCommandRunner}"	method="startPausing"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.STOP_PAUSING}" debug="true">
		<MethodInvoker generator="{MonkeyCommandRunner}"	method="stopPausing"/>
	</EventHandlers>

	<EventHandlers type="{MonkeyCommandRunnerEvent.EXECUTE}" debug="true">
		<MethodInvoker generator="{TestManager}" method="changeSelectedItem" arguments="{[event.item]}"/>
	</EventHandlers>
	
	<EventHandlers type="{MonkeyCommandRunnerEvent.COMPLETE}" debug="true">
		<MethodInvoker generator="{TestManager}" method="updateResults"/>
	</EventHandlers>	
	
<!--......................................................................................................... 		
	TestManager
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.ADD_TEST_SUITE}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="addTestSuite"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.ADD_TEST_CASE}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="addTestCase"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.ADD_TEST}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="addTest"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.ADD_VERIFY}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="addVerify"/>
		<MethodInvoker generator="{CommandDetailView}" method="takeExpectedSnapshotHandler"/>	
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.ADD_PAUSE}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="addPause"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.UPDATE_ITEM}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="updateItem" arguments="{event.item}"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.DELETE_ITEM}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="deleteItem"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.DRAG_MOVE}" debug="true">
		<MethodInvoker generator="{TestManager}"	method="dragMoveItem" 
			arguments="{[event.item,event.dropTargetItem,event.beforeDropTargetItem,event.dropAtBeforeDropTargetLevel]}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.SELECT_ITEM}" debug="true">
		<MethodInvoker generator="{TestManager}" method="changeSelectedItem" arguments="{event.item}"/>
	</EventHandlers>	
	
	<EventHandlers type="{UserEvent.SELECT_ITEMS}" debug="true">
		<MethodInvoker generator="{TestManager}" method="changeSelectedItems" arguments="{event.item}"/>
	</EventHandlers>	

<!--......................................................................................................... 		
	AttributeManager
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.PROPERTY_SELECT_ALL}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertySelectAll"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.PROPERTY_DESELECT_ALL}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertyDeselectAll"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.PROPERTY_INVERT_SELECTION}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertyInvertSelection"/>
	</EventHandlers>	
	
	<EventHandlers type="{UserEvent.PROPERTY_FILTER_CHANGE}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertyFilterChange" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.PROPERTY_ARROW_CLICK}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertyArrowClick" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.PROPERTY_SELECT_CLICK}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="propertySelectClick" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.PROPERTY_UPDATE}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="update"/>
	</EventHandlers>	

	<EventHandlers type="{UserEvent.STYLE_SELECT_ALL}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleSelectAll"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.STYLE_DESELECT_ALL}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleDeselectAll"/>
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.STYLE_INVERT_SELECTION}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleInvertSelection"/>
	</EventHandlers>	
	
	<EventHandlers type="{UserEvent.STYLE_FILTER_CHANGE}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleFilterChange" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.STYLE_ARROW_CLICK}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleArrowClick" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.STYLE_SELECT_CLICK}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="styleSelectClick" arguments="{event.item}"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.STYLE_UPDATE}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="update"/>
	</EventHandlers>	
	
<!--......................................................................................................... 		
	Windows
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.ALERT_CLICK}" debug="true">
		<MethodInvoker generator="{WindowManager}" method="alertWindowClick"/>
	</EventHandlers>	
	
<!--......................................................................................................... 		
	Alerts
	......................................................................................................... -->	
	<EventHandlers type="{AlertEvent.ALERT}" debug="true">
		<ObjectBuilder generator="{AlertView}" cache="none">
			<Properties
				titleText="{event.title}"
				messageTextPart1="{event.messageTextPart1}"
				messageTextPart2="{event.messageTextPart2}"
				buttonText="OK"
				styleName="AlertDialog"				
				mateDispatcher="{scope.dispatcher}"						
				/>
		</ObjectBuilder>
	    <MethodInvoker generator="{WindowManager}" method="displayAlert" arguments="{lastReturn}"/>			
	</EventHandlers>	
	
	<EventHandlers type="{UserEvent.REGISTRATION_PROMPT}">
		<MethodInvoker generator="{WindowManager}" method="displayRegistration"/>
	</EventHandlers>
<!--......................................................................................................... 		
	Snapshot
	......................................................................................................... -->
	<EventHandlers type="{UserEvent.TAKE_EXPECTED_SNAPSHOT}" debug="true">
		<ObjectBuilder generator="{AlertView}" cache="none">
			<Properties
				titleText="Take Snapshot"
				buttonText="Cancel"
				styleName="SnapshotDialog"				
				mateDispatcher="{scope.dispatcher}"						
				/>
		</ObjectBuilder>
	    <MethodInvoker generator="{WindowManager}" method="displayAlert" arguments="{lastReturn}"/>			
		<PropertySetter generator="{ProjectManager}" targetKey="currentVerifyCommand" source="{event.item}"/> 
		<MethodInvoker generator="{MonkeyTestRecorder}" method="takeSnapshot" />
	</EventHandlers>

	<EventHandlers type="{UserEvent.RETAKE_EXPECTED_SNAPSHOT}" debug="true">
		<PropertySetter generator="{ProjectManager}" targetKey="currentVerifyCommand" source="{event.item}"/> 
		<MethodInvoker generator="{ProjectManager}" method="retakeExpectedSnapshot"/>
	</EventHandlers>

	<EventHandlers type="{UserEvent.SHOW_SNAPSHOT_WINDOW}" debug="true">
		<MethodInvoker generator="{WindowManager}" method="openSnapshotWindow"/>	
	</EventHandlers>
	
	<EventHandlers type="{UserEvent.SHOW_SPY_WINDOW}" debug="true">
		<MethodInvoker generator="{AttributeManager}" method="refreshWindow"/>
		<MethodInvoker generator="{WindowManager}" method="openSpyWindow" />	
	</EventHandlers>	
	

<!--......................................................................................................... 		
	UNDO
	......................................................................................................... -->
	<EventHandlers type="{UndoEvent.UNDO}" debug="true">
		<MethodInvoker generator="{UndoManager}" method="undo"/>
		<MethodInvoker generator="{TestManager}" method="updateResults"/>
	</EventHandlers>
	
	<EventHandlers type="{UndoEvent.REDO}" debug="true">
		<MethodInvoker generator="{UndoManager}" method="redo"/>
		<MethodInvoker generator="{TestManager}" method="updateResults"/>		
	</EventHandlers>
	
	<EventHandlers type="{UndoEvent.RESTORE}" debug="true">
		<MethodInvoker generator="{UndoManager}" method="restore" arguments="{event.undoable}"/>
	</EventHandlers>
	
	<EventHandlers type="{UndoEvent.ADD_UNDOABLE}" debug="true">
		<MethodInvoker generator="{UndoManager}" method="addUndoable" arguments="{event.undoable}"/>
		<MethodInvoker generator="{TestManager}" method="updateResults"/>		
	</EventHandlers>		

	<EventHandlers type="{UndoEvent.RESET}" debug="true">
		<MethodInvoker generator="{UndoManager}" method="reset"/>
	</EventHandlers>		
		
<!--......................................................................................................... 		
	Dependency Injection 
	......................................................................................................... -->
	<Injectors target="{ApplicationManager}" debug="true">
		<PropertyInjector targetKey="monkeyTestFileDirty" source="{UndoManager}" sourceKey="dataDirty"/>	
		<PropertyInjector targetKey="browserConnection" source="{BrowserConnectionManager}"/>				
	</Injectors>

	<Injectors target="{BrowserConnectionManager}" debug="true">
		<PropertyInjector targetKey="useBrowser" source="{ProjectManager}" sourceKey="useBrowser"/>	
		<PropertyInjector targetKey="targetSWFURL" source="{ProjectManager}" sourceKey="targetSWFURL"/>		
		<PropertyInjector targetKey="targetSWFWidth" source="{ProjectManager}" sourceKey="targetSWFWidth"/>	
		<PropertyInjector targetKey="targetSWFHeight" source="{ProjectManager}" sourceKey="targetSWFHeight"/>	
		<PropertyInjector targetKey="flashVars" source="{ProjectManager}" sourceKey="flashVars"/>				
	</Injectors>

	<Injectors target="{ProjectManager}" debug="true">
		<PropertyInjector targetKey="projectURL" source="{ApplicationManager}" sourceKey="projectURL"/>
		<PropertyInjector targetKey="monkeyTestFileDirty" source="{UndoManager}" sourceKey="dataDirty"/>	
		<PropertyInjector targetKey="browserConnection" source="{BrowserConnectionManager}"/>	
		<PropertyInjector targetKey="browserConnected" source="{BrowserConnectionManager}" sourceKey="connected"/>	
	</Injectors>

	<Injectors target="{TestManager}" debug="true">			
		<PropertyInjector targetKey="isNewProject" source="{ProjectManager}" sourceKey="isNewProject"/>	
		<PropertyInjector targetKey="monkeyTestFileURL" source="{ProjectManager}" sourceKey="monkeyTestFileURL"/>	
		<PropertyInjector targetKey="generatedCodeURL" source="{ProjectManager}" sourceKey="generatedCodeURL"/>
		<PropertyInjector targetKey="generatedCodeSuitesPackageName" source="{ProjectManager}" sourceKey="generatedCodeSuitesPackageName"/>
	</Injectors>
	
	<Injectors target="{AttributeManager}" debug="true">
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/>
	</Injectors>	
	
	<Injectors target="{WindowManager}" debug="true">
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/> 
	</Injectors>
	
	<Injectors target="{MonkeyCommandRunner}" debug="true">
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/> 
		<PropertyInjector targetKey="browserConnection" source="{BrowserConnectionManager}"/>			
	</Injectors>	
	
	<Injectors target="{MonkeyTestRecorder}" debug="true">
		<PropertyInjector targetKey="browserConnection" source="{BrowserConnectionManager}"/>			
	</Injectors>		
	
	<Injectors target="{AirMonkey}" debug="true">
		<PropertyInjector targetKey="targetSWFURL" source="{ProjectManager}" sourceKey="targetSWFURL"/>
		<PropertyInjector targetKey="useBrowser" source="{ProjectManager}" sourceKey="useBrowser"/>
	</Injectors>
	
	<Injectors target="{AirMonkeyWindowView}" debug="true">
		<PropertySetter generator="{WindowManager}" targetKey="airMonkeyWindow" source="{event.injectorTarget}"/>
		<PropertyInjector targetKey="projectURL" source="{ApplicationManager}" sourceKey="projectURL"/>				
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>		
	</Injectors>

	<Injectors target="{MainView}" debug="true">
		<PropertyInjector targetKey="targetSWF" source="{ProjectManager}" sourceKey="targetSWF"/>		
	</Injectors>

	<Injectors target="{ControlBarView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>
		<PropertyInjector targetKey="projectOpen" source="{ProjectManager}" sourceKey="projectOpen"/>
		<PropertyInjector targetKey="playButtonSelected" source="{MonkeyCommandRunner}" sourceKey="isPlaying"/>		
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/>		
		<PropertyInjector targetKey="undoButtonEnabled" source="{UndoManager}" sourceKey="undoPossible"/>
		<PropertyInjector targetKey="saveButtonEnabled" source="{UndoManager}" sourceKey="dataDirty"/>
		<PropertyInjector targetKey="redoButtonEnabled" source="{UndoManager}" sourceKey="redoPossible"/>		
		<PropertyInjector targetKey="takingSnapshot" source="{MonkeyTestRecorder}" sourceKey="takingSnapshot"/>
		<PropertyInjector targetKey="browserConnectionIndicatorEnabled" source="{ProjectManager}" sourceKey="useBrowser"/>
		<PropertyInjector targetKey="browserConnectionIndicatorSelected" source="{BrowserConnectionManager}" sourceKey="connected"/>
	</Injectors>	
		
	<Injectors target="{CommandGridView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>	
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{CommandGridCommandItemRenderer}" cache="none"/>		
		<PropertyInjector targetKey="commandGridCommandItemRendererFactory" source="{lastReturn}"/>	
		<!-- -->
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{CommandGridResultItemRenderer}" cache="none"/>		
		<PropertyInjector targetKey="commandGridResultItemRendererFactory" source="{lastReturn}"/>	
		<!-- -->
		<PropertyInjector targetKey="testData" source="{TestManager}" sourceKey="testData"/> 
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/> 		
	</Injectors>

	<Injectors target="{CommandDetailView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>	
		<PropertyInjector targetKey="selectedItem" source="{TestManager}" sourceKey="selectedItem"/> 		
		<!-- -->
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{CommandGridResultItemRenderer}" cache="none"/>				
		<PropertyInjector targetKey="resultItemRendererFactory" source="{lastReturn}"/>
		<!-- -->
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{CommandDetailAttributeItemRenderer}" cache="none"/>		
		<PropertyInjector targetKey="commandDetailAttributeItemRendererFactory" source="{lastReturn}"/>	
		<!-- -->
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{AttributeMoveArrowItemRenderer}" cache="none"/>		
		<PropertyInjector targetKey="attributeMoveArrowItemRendererFactory" source="{lastReturn}"/>		
		<!-- -->
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{CommandGridResultItemRenderer}" cache="none"/>		
		<PropertyInjector targetKey="attributeResultItemRendererFactory" source="{lastReturn}"/>		
	</Injectors>

	<Injectors target="{SpyWindowView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>	
	</Injectors>

	<Injectors target="{SpyPropertyView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>	
		<PropertyInjector targetKey="propertyCollection" source="{AttributeManager}" sourceKey="propertyCollection"/>	
		<!-- -->
		<ObjectBuilder generator="{Object}">
			<Properties toRight="{true}"/>
		</ObjectBuilder>
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{AttributeMoveArrowItemRenderer}" cache="none">
			<Properties properties="{lastReturn}"/>		
		</ObjectBuilder>
		<PropertyInjector targetKey="attributeMoveArrowItemRendererFactory" source="{lastReturn}"/>		
		<!-- -->		
	</Injectors>

	<Injectors target="{SpyStyleView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>	
		<PropertyInjector targetKey="styleCollection" source="{AttributeManager}" sourceKey="styleCollection"/>	
		<!-- -->
		<ObjectBuilder generator="{Object}">
			<Properties toRight="{true}"/>
		</ObjectBuilder>
		<ObjectBuilder generator="{ClassFactory}" constructorArguments="{AttributeMoveArrowItemRenderer}" cache="none">
			<Properties properties="{lastReturn}"/>		
		</ObjectBuilder>
		<PropertyInjector targetKey="attributeMoveArrowItemRendererFactory" source="{lastReturn}"/>		
		<!-- -->			
	</Injectors>	
	
	<Injectors target="{ProjectPropertiesWindowView}" debug="true">
		<PropertyInjector targetKey="mateDispatcher" source="{scope.dispatcher}"/>		
		<PropertyInjector targetKey="projectURL" source="{ApplicationManager}" sourceKey="projectURL"/>
		<PropertyInjector targetKey="targetSWFURL" source="{ProjectManager}" sourceKey="targetSWFURL"/>
		<PropertyInjector targetKey="targetSWFWidth" source="{ProjectManager}" sourceKey="targetSWFWidth"/>
		<PropertyInjector targetKey="targetSWFHeight" source="{ProjectManager}" sourceKey="targetSWFHeight"/>
		<PropertyInjector targetKey="useBrowser" source="{ProjectManager}" sourceKey="useBrowser"/>
		<PropertyInjector targetKey="useFlashVars" source="{ProjectManager}" sourceKey="useFlashVars"/>
		<PropertyInjector targetKey="flashVars" source="{ProjectManager}" sourceKey="flashVars"/>
		<PropertyInjector targetKey="generatedCodeSourceDirectory" source="{ProjectManager}" sourceKey="generatedCodeURL"/>
		<PropertyInjector targetKey="generatedCodeSuitesPackageName" source="{ProjectManager}" sourceKey="generatedCodeSuitesPackageName"/>
	</Injectors>
	
</EventMap>
