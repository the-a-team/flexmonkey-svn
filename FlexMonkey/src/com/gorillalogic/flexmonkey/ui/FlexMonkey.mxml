<?xml version="1.0" encoding="utf-8"?> 
<aggro:CollapsableTitleWindow title="FlexMonkey!   "
		xmlns:flexui="flexunit.flexui.*" 
		xmlns:aggro="de.aggro.components.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:gl="com.gorillalogic.flexmonkey.controls.*"
		mouseDown="appMouseDown(event)"
		layout="vertical" width="100%" height="100%" minHeight="300" creationComplete="create()" >
	<aggro:titleIcon>@Embed(source='../../../../../assets/flexMonkeyIcon.png')</aggro:titleIcon>
	
<mx:Script>
	<![CDATA[
		import mx.core.Application;
		import com.flexspy.FlexSpy;
		import mx.collections.ArrayCollection;
		import mx.controls.ToolTip;
		import mx.managers.ToolTipManager;
		import mx.controls.SWFLoader;
		import com.gorillalogic.flexmonkey.commands.FlexCommand;
		import com.gorillalogic.flexmonkey.core.MonkeyEvent;
		import com.gorillalogic.flexmonkey.core.MonkeyUtils;
		import com.gorillalogic.flexmonkey.core.MonkeyEvent;
		import com.gorillalogic.flexmonkey.commands.CommandRunner;		
		import flexunit.junit.JUnitTestRunner;
		import mx.managers.PopUpManager;
		import flexunit.framework.TestCase;
		import flexunit.flexui.TestRunner;
		import de.aggro.components.CollapsableTitleWindowEvent;
		import flexunit.framework.Assert;
		import flexunit.framework.TestSuite;
		import mx.controls.Alert;
		import mx.messaging.FlexClient;
		import mx.controls.Image;
		import mx.events.FlexEvent;
		import com.gorillalogic.aqadaptor.AQAdapter;
		import mx.core.UIComponent;
		import mx.automation.Automation;
		import mx.automation.AutomationManager;
		import mx.automation.events.AutomationRecordEvent;
		import mx.collections.ArrayCollection;
		import mx.binding.utils.BindingUtils;
	
	    import mx.automation.IAutomationManager;
	    import mx.automation.IAutomationObject;
	    import mx.automation.AutomationID;
	    
	    [Event(name="readyForValidation", type="com.gorillalogic.MonkeyEvent")]
	    
	    [Bindable]
		public var commands:ArrayCollection = new ArrayCollection();
		
		private static var testSuite:TestSuite = new TestSuite();
		
		/** 
		 * Embeded CommandRunner
		 */ 
		public var cmdRunner:CommandRunner = new CommandRunner();
		
		/**
		 * Embedded JUnitTestRunner
		 */  
		public var antRunner:JUnitTestRunner = new JUnitTestRunner();

		
		/**
		 * Currently running FlexMonkey instance
		 */ 
		public static const theMonkey:FlexMonkey = new FlexMonkey();
		
		private static var autoStart:Boolean = false;
		
		private static var visible:Boolean = true;
		
		[Bindable]
		private var targetSwfLoader:SWFLoader;
		[Bindable]
		private var testSwfLoader:SWFLoader;
	
		private function create():void {
			allowClose = false;
			cmdRunner.addEventListener(MonkeyEvent.ERROR, function(event:MonkeyEvent):void {
				Assert.fail(event.message);
			});
			if (autoStart) {
				run();
			}
		}
		
		public function collapseWindow():void {
			theMonkey.collapse();
			//this.collapseHandler(new MouseEvent("synthetic"));
		}
		
		public function expandWindow():void {
			//theMonkey.expandHandler(new MouseEvent("synthetic"))
			theMonkey.expand();
			PopUpManager.centerPopUp(theMonkey);
		}
	
		private function startRecording():void
		{
			trace("startRecording()");
			currentState="recording";
			//if(cbMinOnRecord.selected) theMonkey.collapseWindow();
			this.tabs.selectedIndex = 1;
			Automation.automationManager.addEventListener(AutomationRecordEvent.RECORD, recordHandler, false, 0, true);    
			AQAdapter.aqAdapter.beginRecording();
		}

		/**
		/* Enable FlexUnit tests to start running as soon as FlexMonkey opens
		*/
		public static function enableAutoStart(enable:Boolean = true):void {
			autoStart = enable;
		}
		
		private function recordHandler(event:AutomationRecordEvent):void {
			var id:String;
			var idProp:String;
			var obj:IAutomationObject = event.automationObject;
			if (obj.automationName != null && obj.automationName != "") {
				idProp = "automationName"
				id = obj.automationName;
			} else if (obj is UIComponent && UIComponent(obj).id != null && UIComponent(obj).id != "") {
				idProp = "id";
				id = UIComponent(obj).id;
			} else {
				idProp = "automationID";
				id = Automation.automationManager.createID(obj).toString();
			}
			
       		commands.addItem(new FlexCommand(id, event.name, event.args, idProp));

        }

		private function stopRecording():void
		{
			trace("stopRecording()");
			currentState=null;
			AQAdapter.aqAdapter.endRecording();
			Automation.automationManager.removeEventListener(AutomationRecordEvent.RECORD, recordHandler);			
			invalidateSize();
			validateNow();
			//if(cbMinOnRecord.selected) theMonkey.expandWindow();
		}
		
		private function showSource(event:Event):void {
			source.text = "";
			var cmds:Array = cmdGrid.selectedItems.reverse();
			if (cmds.length == 0) {
				cmds = ArrayCollection(cmdGrid.dataProvider).toArray();
			}
			
			if (fullClass.selected) {
				source.text =
				"package your.package\n" +
				"{\n" +
				"	import com.gorillalogic.flexmonkey.ui.FlexMonkey;\n" +
				"	import com.gorillalogic.flexmonkey.core.MonkeyEvent;\n" +
				"	import com.gorillalogic.flexmonkey.commands.CommandRunner;\n" +	
				"	import com.gorillalogic.flexmonkey.core.MonkeyUtils;\n" +
				"	import com.gorillalogic.flexmonkey.commands.CallCommand;\n" +													
				"	import com.gorillalogic.flexmonkey.commands.FlexCommand;\n" +
				"\n" +	
				"	import flash.display.DisplayObject;\n" +
				"	import mx.events.FlexEvent;\n" +				
				"\n" +	
				"	import flexunit.framework.Assert;\n" +
				"	import flexunit.framework.TestCase;\n" +			
				"\n" +
				"\n" +
//				"	[Mixin]\n" +
				"	public class YourTests extends TestCase\n" +
				"	{\n";
//				"      public static function init(root:DisplayObject) : void {\n" +
//				"       root.addEventListener(FlexEvent.APPLICATION_COMPLETE, function():void {\n" +
//				"        // To run with the FlexMonkey UI\n" +
//				"     	 FlexMonkey.addTestSuite(YourTests);\n" +
//				"\n" +				
//				"        // To run from ant instead of the built-in runner, use the lines below instead of the ones obove (and link FlexMonkey.swc instead of FlexMonkeyUI.swc)\n" +
//				"        // var	antRunner:JUnitTestRunner = new JUnitTestRunner();\n" +	
//				"        // antRunner.run(new TestSuite(FlexUnitTests));\n" +	
//				"       });\n" +							
//				"	}\n";
			}
			
			source.text+=
				"	// Test test method\n" +
				"	public function testSomething():void {\n" +
		  		"		var cmdRunner:CommandRunner = new CommandRunner();\n" +
		  		"		cmdRunner.addEventListener(MonkeyEvent.READY_FOR_VALIDATION, addAsync(verifySomething, 10000));\n" +		  		
				"		cmdRunner.runCommands([\n";
			var first:Boolean = true;	
			for each (var cmd:FlexCommand in cmds) {
				if (first) {
					first = false;
				} else {
					source.text+=",\n";
				}
			
				source.text+=
				 	"			new FlexCommand(\"" + cmd.value + "\", \"" + cmd.command + "\"";
				 	source.text+=", [";

			 		source.text+=quote(cmd.args[0]);
			 		for each (var arg:String in cmd.args.slice(1)) {
			 			source.text+=", " + quote(arg); 
			 		}
 
				 	source.text+="]";
				 	
			 		if (cmd.prop) {
			 			source.text +=", \"" + cmd.prop + "\""
			 			if (cmd.containerValue) {
			 				source.text+=", \"" + cmd.containerValue + "\"";
			 				if (cmd.containerProp) {
			 					source.text+=", \"" + cmd.containerProp + "\"";
			 				}
			 			}
			 		}
			 		source.text+=")"

			}
			source.text+="			]);\n" +
				"   }\n\n";
			source.text+=
				"	// Called after commands have been run\n" +
				"	private function verifySomething(event:MonkeyEvent):void {\n" +
				"		var comp:UIComponent = MonkeyUtils.findComponentWith(\"someAutomationName\")\n" +
				"		Assert.assertEquals(\"value\",comp.prop);\n" +
				"	}"
				
			if (fullClass.selected) {
				source.text+="   }\n}";
			}
				
				
		} 
		
		private static function quote(arg:Object):String {
			return !(arg is Boolean) ? "\"" + String(arg) + "\"" : String(arg);
		}
		

		/**
		 * 
		 * Executes the supplied Commands.
		 * 
		 * In addition to running FlexCommands, you can also run PauseCommands and CallCommands. For example:
		 * 
		 * FlexMonkey.runCommands([
		 * 		new FlexCommand("SomeButton", "Click", [0], "automationName"),
		 * 		// Wait an additional 5 seconds
		 * 		new PauseCommand(5000),
		 * 		// Check something
		 * 		new CallCommand(function(Assert.assertTrue(something))
		 * 		// Run more commands....
		 * 		new FlexCommand("AnotherButton", "Click", [0], "automationName")
		 * 		]);
		 */ 
		public static function runCommands(cmds:Array, validator:Function=null):void {	
			theMonkey.cmdRunner.runCommands(cmds, validator, new int(theMonkey.thinkTime.text));			
		}
		
		private function runSelected(event:MouseEvent):void {
			
			var selectedCommands:Array = cmdGrid.selectedItems;
			if (selectedCommands.length == 0) {
				selectedCommands = ArrayCollection(cmdGrid.dataProvider).toArray();
			}	
			runCommands(selectedCommands);
		}
		
		// TODO wes- cannot find any reference to this function anywhere in the code... to be deleted?
		private static function isRecording():Boolean {
			return Automation.automationManager.recording;
		}
		
		public static function findComponentWith(value:String, prop:String="automationName", container:UIComponent=null):UIComponent {
			return MonkeyUtils.findComponentWith(value, prop, container);
		}

		
		public static function addTestSuite(suite:Class):void {
			testSuite.addTestSuite(suite);
			theMonkey.checkForAutoRun();
		}
		
		public static function run():void {		
				theMonkey.collapseWindow();
				theMonkey.testRunner.test = testSuite;
				theMonkey.testRunner.startTest();				
				theMonkey.testRunner.addEventListener("testsComplete",function():void {
					theMonkey.tabs.selectedIndex = 3;
					theMonkey.expandWindow();
					});
		}
		
		
		public static function runFromAnt(quitWhenDone:Boolean=false):void {
				
				theMonkey.antRunner.run(testSuite, function():void {
					if (quitWhenDone) {
						fscommand("quit");
					}
				})
		}		
		
		
		public function removeCommand(img:Image):void {
			commands.removeItemAt(img.listData.rowIndex);
		}
		
		/**
		 * Registers a verification function for a TestCase. Function will be called after commands have been run.
		 * @param test the TestCase 	
		 * @param func the function to call after commands have been run
		 * @param timeOut Maximum time to wait for the commands to run
		 */ 		
		public static function addVerifier(test:TestCase, func:Function, timeOut:int=10000):void {
			theMonkey.cmdRunner.addEventListener(MonkeyEvent.READY_FOR_VALIDATION, test.addAsync(func, timeOut));
		}

		public function loadConfig():void {
			
				// Attempt to use flashvars to pass parameters. Doesn't currently work
				// since swfs lock up (makes no sense)
				if (Application.application.parameters.hasOwnProperty("targetSwf")) {
					var target:String = Application.application.parameters.targetSwf;
					var test:String = Application.application.parameters.testSwf;
					var visible:String = Application.application.parameters.visible;
					var autoStart:String =  Application.application.parameters.autoStart;
					var height:int = Application.application.parameters.targetHeight;
					var width:int = Application.application.parameters.targetWidth;
					loadWith(target, test, visible, autoStart, width, height);
					return;
					
				}
				// If no config file, assume they're going to specify SWF manually thru UI			   		
				showMonkey();
				tabs.selectedIndex = 0;
				targetSwf.errorString = 'No targetSwf specified. Please specify a SWF in the working directory to run.'
		}

			private function handleBtnLoadSWF():void{
				this.targetSwfLoader = loadSwf(targetSwf, targetSwf.text, int(targetSwfWidth.text), int(targetSwfHeight.text))
			}
			
			private function load(config:XML):void {
                var target:String = config.@targetSwf;
                var test:String = config.@testSwf;                
                var visible:String = config.@visible;
                var autoStart:String = config.@autoStart;
                var width:int = config.@width;
                var height:int = config.@height;
                loadWith(target, test, visible, autoStart, width, height);
            }
            
            protected var initialNumLoaded : int = 0;
            protected var autorunComplete : Boolean = false;
            
            protected function swfInitComplete(event : Event) : void{
                initialNumLoaded++;
                checkForAutoRun();
            }
            
            protected function checkForAutoRun() : void {
                if (initialNumLoaded == 2 
                    && testSuite.countTestCases() > 0
                    && !autorunComplete){
                    autorunComplete = true;
                    FlexMonkey.run();
                }   
            }
			
			private function loadWith(target:String, test:String, vis:String="true", autoStart:String="false", width:int=0, height:int=0): void {
				visible = !(vis == "false");
				if (visible) {
					showMonkey();
				}
				
				targetSwfLoader = loadSwf(targetSwf, target, width, height);
				if (test != null && test.length > 0) {
					testSwfLoader = loadSwf(testSwf, test);
				}
				
				// Doesn't work. Starts tests before app is finished loading?
				if (autoStart == "true" && testSwfLoader!=null) {
					testSwfLoader.addEventListener(Event.INIT, function():void {
						FlexMonkey.run();
					});	
				}			
			}
			
			private function loadSwf(input:TextInput, name:String, width:int=0, height:int=0):SWFLoader {
				trace("loadSwf() - " + input + ", " + name);
				var loader:SWFLoader = new SWFLoader();
				loader.addEventListener(FlexEvent.PREINITIALIZE, function():void {
					loader.loaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);
				});
				
				loader.addEventListener(IOErrorEvent.IO_ERROR, function():void {
					if (!visible) {
						// Following line doesn't work :(
						showMonkey();
						
						Alert.show("Unable to load file " + MonkeyUtils.getAppPath() + "/" + filename(name));
						return;
					}
					showError(input, name);
				});
				
				var fname:String = filename(name);
				if (input != null) {
					input.text = fname;
				}

				loader.source = fname;
				loader.scaleContent = true;
				if (width > 0) {
					loader.width = width;
					targetSwfWidth.text = String(width);
				}
				if (height > 0) {
					loader.height = height;
					targetSwfHeight.text = String(height);
				}

				Application.application.addChild(loader);
				return loader;
			}
			
			private function showError(input:TextInput, name:String):void {
   				input.errorString = "Unable to load file " + MonkeyUtils.getAppPath() + "/" + filename(name);
  				input.focusManager.setFocus(input);
			}
			
			public static function showMonkey():void {
				PopUpManager.addPopUp(FlexMonkey.theMonkey, DisplayObject(Application.application));
				PopUpManager.centerPopUp(FlexMonkey.theMonkey);	
			}			
			
			private function filename(target:String):String {
				return target.match(/.*\.swf\s*/) ? target : target + ".swf";
			}
			
		public function handleBtnRecordClick(event:Event):void{
			trace("handleBtnRecordClick()");
			trace("btnRecord.selected=" + btnRecord.selected);
			if(!btnRecord.enabled){
				//ignore click
				return;
			}
			if(currentState=="recording" ){ stopRecording(); }
			else { startRecording(); }
			event.stopImmediatePropagation();
		}
		
		public function appMouseDown(event:Event):void{
			trace("appMouseDown -- " + event);
			if(currentState=="recording" && cbStopRecordingOnFocus.selected==true){
				stopRecording();
			}
		}
		
		public function handleFlexSpyClick(event:Event):void{
			FlexSpy.show(targetSwfLoader.content['application']);
		}
		
	]]>
</mx:Script>
	<mx:HRule width="100%"/>
	<gl:IgnoreAutomationVBox height="100%" width="100%" paddingLeft="5" paddingRight="5" paddingBottom="5">
	<mx:Button label="Record" mouseDown="handleBtnRecordClick(event)" toggle="false" id="btnRecord" toolTip="toggles Recording"/>
	<mx:TabNavigator id="tabs" width="99%" height="99%" creationPolicy="all"> <!-- selectedIndex="1" -->
	<mx:VBox label="Setup" width="100%" height="100%" id="setupVbox" minHeight="300" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<mx:VBox borderColor="#FFFFFF" borderThickness="1" cornerRadius="10"  backgroundColor="#6695BD" color="#FFFFFF" fontWeight="bold" width="100%" borderStyle="solid">
			<mx:Label text="Test SWF Directory:" paddingLeft="5"/>
			<mx:Label text="{MonkeyUtils.getAppPath()}" paddingLeft="5"/>	
		</mx:VBox>
		
		<mx:Form width="100%">
			<mx:FormItem label="App to Test" width="100%" fontWeight="bold">
				<mx:TextInput id="targetSwf" keyDown="targetSwf.errorString = null" width="100%"/>
				<mx:HBox>
					<mx:FormItem label="Width">
						<mx:TextInput width="50" id="targetSwfWidth"/>
					</mx:FormItem>
					<mx:FormItem label="Height">
						<mx:TextInput width="50" id="targetSwfHeight"/>
					</mx:FormItem>					
				</mx:HBox>
				<mx:Button id="btnSetupLoadSWF" label="Load SWF" click="handleBtnLoadSWF()"/>
				</mx:FormItem>
				<mx:FormItem label="Tests to Run (Optional)" width="100%" fontWeight="bold">
					<mx:TextInput id="testSwf" keyDown="testSwf.errorString = null" width="100%"/>
					<mx:Button id="btnSetupLoadTestSWF" label="Load SWF" click="loadSwf(testSwf, testSwf.text)"/>						
				</mx:FormItem>
				<mx:FormItem label="Window Preferences" width="100%" fontWeight="bold">
					<mx:VBox height="100%" borderStyle="solid" cornerRadius="6" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
						<mx:CheckBox id="cbStopRecordingOnFocus" label="Stop recording on focus" toolTip="stops recording when the FlexMonkey window is brought into focus by a click" fontWeight="bold" selected="true"/> 
						<!--<mx:CheckBox id="cbMinOnRecord" label="Minimize on Record" fontWeight="bold"/>-->
						<!--<mx:CheckBox id="refreshSWF" label="Refresh SWF on Playback" fontWeight="bold"/>
						<mx:CheckBox id="minOnPlayback" label="Minimize on Playback" fontWeight="bold"/>-->
					</mx:VBox>
				</mx:FormItem>
			</mx:Form>
	


		</mx:VBox>
		<mx:VBox label="Command List" width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingBottom="5">
			<mx:ControlBar width="100%">
				<mx:Button id="btnCommandRun" label="Run" click="runSelected(event)"/>
				<mx:Button id="btnCommandClear" label="Clear" click="commands.removeAll()"/>
				<mx:Button id="btnFlexSpy" label="FlexSpy" click="handleFlexSpyClick(event)" enabled="{theMonkey.targetSwfLoader != null}"  textAlign="center"/>
				<mx:CheckBox id="editEnabled" label="Editable" toolTip="Enable editing of the command grid"/>
				<mx:HBox toolTip="The time in milliseconds to pause between commands" cornerRadius="4" borderStyle="solid">
					<mx:Label text="ThinkTime" textAlign="right" paddingTop="2"/>
					<mx:TextInput id="thinkTime" width="65" text="501" />
					<mx:Label text="ms" paddingTop="2"/>
				</mx:HBox>
				
			</mx:ControlBar>
			<gl:CheckBoxDataGrid editable="{editEnabled.selected}" id="cmdGrid" x="10" y="10" 
				height="100%" width="100%" dataProvider="{commands}" allowMultipleSelection="true" sortableColumns="false" allowDragSelection="true" rowCount="5" verticalScrollPolicy="on">
				<gl:columns>
					<!-- <mx:DataGridColumn headerText="" width="40" editable="false"/> -->
					<mx:DataGridColumn headerText="" width="20" editable="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:Image source="@Embed(source='/assets/delete.png')" click="outerDocument.removeCommand(this)"/>
							</mx:Component>
						</mx:itemRenderer>	
					</mx:DataGridColumn>								
					<mx:DataGridColumn headerText="Command" dataField="command" width="100"/>					
					<mx:DataGridColumn headerText="Value" dataField="value" width="100"/>
					<mx:DataGridColumn headerText="Property" dataField="prop" width="100"/>					
					<mx:DataGridColumn headerText="Arguments" dataField="args" width="200" itemEditor="com.gorillalogic.flexmonkey.controls.ArrayInput" editorDataField="data"/>
					<mx:DataGridColumn headerText="Container Value" dataField="containerId" width="100"/>
					<mx:DataGridColumn headerText="Container Property" dataField="containerProp" width="100"/>										
				</gl:columns>
			</gl:CheckBoxDataGrid> 
		</mx:VBox>
		
		<mx:VBox label="TestCase Code" width="100%" height="100%" show="showSource(event)" 
			paddingLeft="5" paddingRight="5" paddingBottom="5">
			<mx:VBox borderStyle="solid" borderThickness="1" cornerRadius="10" backgroundColor="#6695BD" color="#FFFFFF">
				<mx:Text text="The source below is generated from the currently selected commands in the Command List..." fontStyle="italic" fontWeight="bold" />
			</mx:VBox>
			<mx:CheckBox id="fullClass" label="Show complete TestCase" click="showSource(event)"/>
			<mx:TextArea id="source"  width="100%" height="100%" x="0" verticalScrollPolicy="on"/>
		</mx:VBox>					
		
		<mx:VBox id="flexrunner" label="FlexUnit Runner" height="100%" width="100%"
			paddingLeft="5" paddingRight="5" paddingBottom="5">
			<mx:HBox paddingRight="5" paddingLeft="5" paddingBottom="5">
				<mx:Button label="Run" click="run()" />
			</mx:HBox>
			<flexui:TestRunnerBase id="testRunner" height="100%" width="100%" />	    	
	    </mx:VBox>
	</mx:TabNavigator> 
	</gl:IgnoreAutomationVBox>
	
	<mx:NumberValidator source="{thinkTime}" property="text" integerError="Enter Integer value"
        minValue="5" maxValue="1800000" domain="int" trigger="{thinkTime}" triggerEvent="change" 
        exceedsMaxError="Maximum value is 1/2 hr (1,800,000ms)" 
        lowerThanMinError="Minimum value is 5ms"/>

     
	<aggro:states>
		<mx:State name="recording">
			<mx:SetStyle target="{btnRecord}" name="color" value="#E13636"/>
			<mx:SetProperty target="{btnRecord}" name="label" value="Recording"/>
			<mx:SetStyle target="{btnRecord}" name="textRollOverColor" value="#E13636"/>
			<mx:SetStyle target="{btnRecord}" name="tooltip" value="Click to STOP recording"/>
			<mx:SetProperty name="title" value="FlexMonkey! - recording"/>
			<mx:SetProperty target="{btnFlexSpy}" name="enabled" value="false"/>
			<mx:SetProperty target="{btnCommandRun}" name="enabled" value="false"/>
			<mx:SetProperty target="{btnCommandClear}" name="enabled" value="false"/>
			<mx:SetProperty target="{btnSetupLoadSWF}" name="enabled" value="false"/>
			<mx:SetProperty target="{btnSetupLoadTestSWF}" name="enabled" value="false"/>
		</mx:State>
	</aggro:states>   
	
</aggro:CollapsableTitleWindow>
