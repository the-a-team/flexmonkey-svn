<?xml version="1.0" encoding="utf-8"?>
<!--
FlexMonkey 1.0, Copyright 2008, 2009 by Gorilla Logic, Inc.
FlexMonkey 1.0 is distributed under the GNU General Public License, v2.
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comps="com.gorillalogic.flexmonkey.application.UI.viewComponents.*"	
	width="100%"
	height="42"
	paddingTop="0"
	paddingRight="5"
	paddingBottom="0"
	paddingLeft="5"	
	verticalGap="0"
	verticalAlign="middle"
	initialize="initializeHandler()"	
>
	<mx:Script>
		<![CDATA[
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;	
			import com.gorillalogic.flexmonkey.application.events.MonkeyFileEvent;
			import com.gorillalogic.flexmonkey.application.events.UndoEvent;
			import com.gorillalogic.flexmonkey.application.events.UserEvent;	
			import com.gorillalogic.flexmonkey.core.MonkeyTestSuite;				
			import com.gorillalogic.flexmonkey.core.MonkeyTestCase;					
			import com.gorillalogic.flexmonkey.core.MonkeyRunnable;				
			import com.gorillalogic.flexmonkey.core.MonkeyTest;				
			import com.gorillalogic.flexmonkey.monkeyCommands.*;
			import com.asfusion.mate.ioc.InjectorRegistry;
			import com.gorillalogic.flexmonkey.application.UI.viewComponents.IconMenuBarItem;
			import flash.events.IEventDispatcher;

			public var mateDispatcher : IEventDispatcher;
			
			private function initializeHandler():void{
				InjectorRegistry.register(this);
			}
			
[Bindable] private var menuBarItemRenderer:IFactory = new ClassFactory(IconMenuBarItem);		

			private var _browserConnectionIndicatorDisabled:Boolean = false;
			public function get browserConnectionIndicatorDisabled():Boolean{
				return _browserConnectionIndicatorDisabled;
			}
			public function set browserConnectionIndicatorDisabled(c:Boolean):void{
				_browserConnectionIndicatorDisabled = c;
				browserConnectionIndicatorEnabled = !c;				
			}

			private var _browserConnectionIndicatorEnabled:Boolean = false;
			[Bindable] 
			public function get browserConnectionIndicatorEnabled():Boolean{
				return _browserConnectionIndicatorEnabled;
			}
			public function set browserConnectionIndicatorEnabled(c:Boolean):void{
				_browserConnectionIndicatorEnabled = c;
				updateEnables();				
			}

			private var _browserConnectionIndicatorSelected:Boolean = false;
			[Bindable] 
			public function get browserConnectionIndicatorSelected():Boolean{
				return _browserConnectionIndicatorSelected;
			}
			public function set browserConnectionIndicatorSelected(c:Boolean):void{
				if(_browserConnectionIndicatorSelected == true && c == false){  // if we are turning it OFF
					_browserConnectionIndicatorSelected = c;
					recordButton.selected = false;
					pauseButton.selected = false;					
					playButton.selected = false;
					return;
				}
				_browserConnectionIndicatorSelected = c;
				updateEnables();
			}			

			public function toolTipShowHandler(event:ToolTipEvent):void{   
				var point:Point = event.currentTarget.localToGlobal(new Point(0,0));
				event.toolTip.x = point.x;
				event.toolTip.y = point.y + event.currentTarget.height;
			}

			private var _selectedItem:MonkeyRunnable;
			public function set selectedItem(m:MonkeyRunnable):void{
				_selectedItem = m;
				if(_selectedItem is MonkeyTestCase || _selectedItem is MonkeyTestSuite){
					if(recordButtonSelected){
						recordButtonSelected = false;
						mateDispatcher.dispatchEvent(new UserEvent(UserEvent.STOP_RECORDING));
					}					
				}
				updateEnables();
			}
				
			private var _projectOpen:Boolean;
			public function get projectOpen():Boolean{
				return _projectOpen;
			}	
			public function set projectOpen(o:Boolean):void{
				_projectOpen = o;
				updateEnables();
			}
				
			private var _takingSnapshot:Boolean;
			public function get takingSnapshot():Boolean{
				return _takingSnapshot;
			}	
			public function set takingSnapshot(t:Boolean):void{
				_takingSnapshot = t;
				if(_takingSnapshot){
					recordButtonSelected = false;
				}
			}
							
			private var _recordButtonSelected:Boolean;
			[Bindable]
			public function get recordButtonSelected():Boolean{
				return _recordButtonSelected;
			}
			public function set recordButtonSelected(s:Boolean):void{
				_recordButtonSelected = s;
				updateEnables();				
			}
			
			private var _playButtonSelected:Boolean;
			[Bindable]
			public function get playButtonSelected():Boolean{
				return _playButtonSelected;
			}
			public function set playButtonSelected(s:Boolean):void{
				if(!s){
					pauseButton.selected = false;
					mateDispatcher.dispatchEvent(new UserEvent(UserEvent.STOP_PAUSING));
				}	
				_playButtonSelected = s;	
				updateEnables();											
			}	
													  
	        public function recordButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent;
				if(recordButtonSelected){
				 	userEvent = new UserEvent(UserEvent.START_RECORDING);
				}else{
					userEvent = new UserEvent(UserEvent.STOP_RECORDING);
				}
				mateDispatcher.dispatchEvent(userEvent);
	        } 
	        public function playButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent;
				if(playButtonSelected){
				 	userEvent = new UserEvent(UserEvent.START_PLAYING);
				}else{
					userEvent = new UserEvent(UserEvent.STOP_PLAYING);
				}
				mateDispatcher.dispatchEvent(userEvent);
	        } 
	        public function pauseButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent;
				if(pauseButton.selected){
				 	userEvent = new UserEvent(UserEvent.START_PAUSING);
				}else{
					userEvent = new UserEvent(UserEvent.STOP_PAUSING);
				}
				mateDispatcher.dispatchEvent(userEvent);
	        } 

	        public function addTestSuiteButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD_TEST_SUITE);
				mateDispatcher.dispatchEvent(userEvent);			
	        } 	        
	        public function addTestCaseButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD_TEST_CASE);
				mateDispatcher.dispatchEvent(userEvent);			
	        } 
	        public function addTestButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD_TEST);
				mateDispatcher.dispatchEvent(userEvent);			
	        } 
	        
	        public function addVerifyButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD_VERIFY);
				mateDispatcher.dispatchEvent(userEvent);	
	        }            
	        public function addPauseButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD_PAUSE);
				mateDispatcher.dispatchEvent(userEvent);	
	        }
	        public function undoButtonHandler(event:MouseEvent):void{
				var undoEvent:UndoEvent = new UndoEvent(UndoEvent.UNDO);
				mateDispatcher.dispatchEvent(undoEvent);	
	        }
	        public function redoButtonHandler(event:MouseEvent):void{
				var redoEvent:UndoEvent = new UndoEvent(UndoEvent.REDO);
				mateDispatcher.dispatchEvent(redoEvent);
	        } 
	        public function deleteButtonHandler(event:MouseEvent):void{
				var userEvent:UserEvent = new UserEvent(UserEvent.DELETE_ITEM);
				mateDispatcher.dispatchEvent(userEvent);				
	        }	
	        public function saveButtonHandler(event:MouseEvent):void{
	        	var monkeyFileEvent:MonkeyFileEvent = new MonkeyFileEvent(MonkeyFileEvent.TEST_FILE_SAVE);
				mateDispatcher.dispatchEvent(monkeyFileEvent);	
	        }
	        
			public function updateEnables():void{
				recordButton.enabled = !(browserConnectionIndicatorEnabled && !browserConnectionIndicatorSelected) &&
									   !playButtonSelected && 
									   !(_selectedItem == null) &&	
									   !(_selectedItem is MonkeyTestSuite) &&	
									   !(_selectedItem is MonkeyTestCase);

				playButton.enabled =   !(browserConnectionIndicatorEnabled && !browserConnectionIndicatorSelected) &&
									   !recordButtonSelected &&
									   !(_selectedItem == null);

				pauseButton.enabled =  playButtonSelected;

				 
				addTestSuiteButton.enabled = projectOpen &&
											 !recordButtonSelected &&
											 !playButtonSelected &&
											 !(_selectedItem is MonkeyTestCase) &&
											 !(_selectedItem is MonkeyTest) &&
											 !(_selectedItem is UIEventMonkeyCommand) &&
											 !(_selectedItem is PauseMonkeyCommand) &&
											 !(_selectedItem is VerifyMonkeyCommand);		 

				addTestCaseButton.enabled = !(_selectedItem == null) &&
											!recordButtonSelected &&
											!playButtonSelected &&
											!(_selectedItem is MonkeyTest) &&
											!(_selectedItem is UIEventMonkeyCommand) &&
											!(_selectedItem is PauseMonkeyCommand) &&
											!(_selectedItem is VerifyMonkeyCommand);	

				addTestButton.enabled = !(_selectedItem == null) &&
										!recordButtonSelected &&
										!playButtonSelected &&
										!(_selectedItem is MonkeyTestSuite) &&
										!(_selectedItem is UIEventMonkeyCommand) &&
										!(_selectedItem is PauseMonkeyCommand) &&
										!(_selectedItem is VerifyMonkeyCommand);	
				
				addPauseButton.enabled = !(_selectedItem == null) &&
										 !playButtonSelected &&
										 !(_selectedItem is MonkeyTestSuite) &&
										 !(_selectedItem is MonkeyTestCase);
				
				addVerifyButton.enabled	= !(browserConnectionIndicatorEnabled && !browserConnectionIndicatorSelected) &&
										  addPauseButton.enabled;
				
				deleteButton.enabled = !(_selectedItem == null) &&
									   !playButtonSelected; 			
		}
	
		[Bindable] public var saveButtonEnabled:Boolean = false;
		[Bindable] public var undoButtonEnabled:Boolean = false;
		[Bindable] public var redoButtonEnabled:Boolean = false;
			
		]]>
	</mx:Script>
	<!-- Enable logic -->	
	<mx:Binding source="saveButtonEnabled" destination="saveButton.enabled"/>	
	<mx:Binding source="undoButtonEnabled" destination="undoButton.enabled"/>	
	<mx:Binding source="redoButtonEnabled" destination="redoButton.enabled"/>	
	<mx:Binding source="browserConnectionIndicatorEnabled" destination="browserConnectionIndicator.enabled"/>
		
	<!-- Select logic -->
	<mx:Binding source="recordButton.selected" destination="recordButtonSelected"/>
	<mx:Binding destination="recordButton.selected" source="recordButtonSelected"/>
	<mx:Binding source="playButton.selected" destination="playButtonSelected"/>
	<mx:Binding destination="playButton.selected" source="playButtonSelected"/>
	<mx:Binding source="browserConnectionIndicatorSelected" destination="browserConnectionIndicator.selected"/>

	<mx:HRule width="100%"/>		
	<mx:HBox
		width="100%"
		height="100%"
		paddingTop="0"
		paddingRight="0"
		paddingBottom="0"
		paddingLeft="3"
		verticalAlign="middle">	
	 	<mx:Button id="recordButton" styleName="RecordButton" toggle="true" toolTip="Record" width="32" height="32"
	 		click="recordButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="playButton" styleName="PlayButton" toggle="true" toolTip="Play" width="32" height="32"
	 		click="playButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="pauseButton" toolTip="Pause" styleName="PauseButton" toggle="true" width="32" height="32" 
	 		click="pauseButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:VRule height="90%"/>
	 	<mx:Button id="addTestSuiteButton" toolTip="Add Test Suite" styleName="AddTestSuiteButton" width="32" height="32" 
	 		click="addTestSuiteButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="addTestCaseButton" toolTip="Add Test Case" styleName="AddTestCaseButton" width="32" height="32" 
	 		click="addTestCaseButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="addTestButton" toolTip="Add Test" styleName="AddTestButton" width="32" height="32" 
	 		click="addTestButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="addVerifyButton" toolTip="Add Verify" styleName="AddVerifyButton" width="32" height="32" 
	 		click="addVerifyButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="addPauseButton" toolTip="Add Pause" styleName="AddPauseButton" width="32" height="32" 
	 		click="addPauseButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="deleteButton" toolTip="Delete Item" styleName="DeleteButton" width="32" height="32" 
	 		click="deleteButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>  
	 	<mx:VRule height="90%"/>	
	 	<mx:Button id="undoButton" toolTip="Undo" styleName="UndoButton" width="32" height="32" 
	 		click="undoButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:Button id="redoButton" toolTip="Redo" styleName="RedoButton" width="32" height="32" 
	 		click="redoButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:VRule height="90%"/>	     	
		<mx:Button id="saveButton" toolTip="Save" styleName="SaveButton" width="32" height="32"
			click="saveButtonHandler(event)" toolTipShow="toolTipShowHandler(event)"/>
	 	<mx:VRule height="90%"/>
	 	<mx:Button id="browserConnectionIndicator" toolTip="Browser Connection" styleName="BrowserConnectionIndicator" width="32" height="32"
	 		toolTipShow="toolTipShowHandler(event)"/>	 	 	
	</mx:HBox> 
	<mx:HRule width="100%"/>		
</mx:VBox>
